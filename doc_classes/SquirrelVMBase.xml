<?xml version="1.0" encoding="UTF-8" ?>
<class name="SquirrelVMBase" inherits="SquirrelVariant" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Base type for SquirrelVM and SquirrelThread.
	</brief_description>
	<description>
		[SquirrelVMBase] is the base type for [SquirrelVM] and [SquirrelThread].
		See [SquirrelVM] for more general information.
	</description>
	<tutorials>
		<link title="Squirrel Reference Manual">http://www.squirrel-lang.org/squirreldoc/reference/index.html</link>
	</tutorials>
	<methods>
		<method name="apply_function">
			<return type="Variant" />
			<param index="0" name="func" type="SquirrelCallable" />
			<param index="1" name="this" type="Variant" />
			<param index="2" name="args" type="Array" />
			<description>
			</description>
		</method>
		<method name="call_function" qualifiers="const vararg">
			<return type="Variant" />
			<param index="0" name="func" type="SquirrelCallable" />
			<param index="1" name="this" type="Variant" />
			<description>
			</description>
		</method>
		<method name="collect_garbage">
			<return type="int" />
			<description>
				Finds and deletes objects that are unreachable. Returns the number of reference cycles found and deleted.
				[b]Note:[/b] Unreferenced (as opposed to just unreachable) objects are deleted automatically without calling the garbage collector.
			</description>
		</method>
		<method name="convert_variant">
			<return type="Variant" />
			<param index="0" name="value" type="Variant" />
			<param index="1" name="wrap_unhandled_values" type="bool" default="false" />
			<description>
				Converts [Array], [Dictionary], [PackedByteArray], [PackedInt32Array], [PackedInt64Array], [PackedFloat32Array], and [PackedFloat64Array] to [SquirrelArray] and [SquirrelTable].
				If [param wrap_unhandled_values] is true, also wraps any [Variant] that would be rejected by [method push_stack] using [method wrap_variant]. Otherwise, if any such values are present, returns [code]null[/code].
				[b]Note:[/b] This doesn't call [method wrap_callable] in either case. If you intend to pass a [Callable] to Squirrel as a function, you need to call [method wrap_callable] directly.
			</description>
		</method>
		<method name="create_array">
			<return type="SquirrelArray" />
			<param index="0" name="size" type="int" />
			<description>
				Creates a new [SquirrelArray] containing [param size] items, all set to [code]null[/code].
			</description>
		</method>
		<method name="create_blob">
			<return type="SquirrelInstance" />
			<param index="0" name="data" type="PackedByteArray" />
			<description>
				Creates a [url=http://www.squirrel-lang.org/squirreldoc/stdlib/stdbloblib.html#the-blob-class]blob[/url] instance with the specified [param data].
			</description>
		</method>
		<method name="create_table">
			<return type="SquirrelTable" />
			<description>
				Creates a new empty [SquirrelTable].
			</description>
		</method>
		<method name="create_table_with_initial_capacity">
			<return type="SquirrelTable" />
			<param index="0" name="size" type="int" />
			<description>
				Creates a new empty [SquirrelTable] with space for [param size] slots already allocated. Can improve performance when the number of slots in a table is known ahead of time by reducing reallocations.
			</description>
		</method>
		<method name="create_thread">
			<return type="SquirrelThread" />
			<description>
				Creates a [SquirrelThread] which can be used both as a Squirrel value and as a VM that shares memory.
				[b]Note:[/b] This differs from the [code]newthread[/code] function in that it does not assign a function to the thread. If you are going to send the thread to Squirrel as a value, push a function onto the stack. Likewise, if you are using an idle thread allocated by a Squirrel script, pop the function from the stack and pass it to [method call_function], then put it back on the stack once the thread returns to an idle state.
			</description>
		</method>
		<method name="get_last_error" qualifiers="const">
			<return type="Variant" />
			<description>
				Returns the current error value, either from a [code]throw[/code] statement, code in the Squirrel standard library or runtime (usually a [String]), or a GDScript function returning [SquirrelThrow].
			</description>
		</method>
		<method name="get_stack" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="index" type="int" />
			<description>
				Retrieves a value from the Squirrel execution stack. Positive integers count up from the bottom of the stack, and negative numbers count down from the top of the stack. 0 is not a valid stack index.
			</description>
		</method>
		<method name="get_stack_top" qualifiers="const">
			<return type="int" />
			<description>
				Returns the (positive) index of the top of the stack (accessible via [code]get_stack(-1)[/code]).
			</description>
		</method>
		<method name="get_state" qualifiers="const">
			<return type="int" enum="SquirrelVMBase.VMState" />
			<description>
				Returns [constant SUSPENDED] if the thread is waiting for a call to [method wake_up].
				Returns [constant RUNNING] if there is at least one function on the call stack and the thread is not suspended.
				Returns [constant IDLE] otherwise.
			</description>
		</method>
		<method name="import">
			<return type="SquirrelFunction" />
			<param index="0" name="script" type="SquirrelScript" />
			<param index="1" name="debug_file_name" type="String" default="&quot;&quot;" />
			<description>
				Imports a [SquirrelScript] as a [SquirrelFunction]. If [member SquirrelScript.bytecode] is not empty, the script will be parsed from bytecode. Otherwise, the script will be compiled in the VM.
				Optionally, [param debug_file_name] will replace [param script]'s [member Resource.name] in error messages if it is not empty.
				Returns [code]null[/code] if parsing the bytecode or compiling the script fails.
				[b]Note:[/b] If you intend to use a [SquirrelScript] multiple times or you need access to the error information when the compilation fails, call [method SquirrelScript.compile] to compile the script and serialize it to bytecode. Scripts imported as project files are compiled by default.
			</description>
		</method>
		<method name="import_blob">
			<return type="void" />
			<description>
				Imports the [url=http://www.squirrel-lang.org/squirreldoc/stdlib/stdbloblib.html]blob[/url] library.
			</description>
		</method>
		<method name="import_math">
			<return type="void" />
			<description>
				Imports the [url=http://www.squirrel-lang.org/squirreldoc/stdlib/stdmathlib.html]math[/url] library.
			</description>
		</method>
		<method name="import_script">
			<return type="SquirrelFunction" />
			<param index="0" name="script" type="String" />
			<param index="1" name="debug_file_name" type="String" default="&quot;&quot;" />
			<description>
				Convenience function for constructing a [SquirrelScript] and setting [member SquirrelScript.source], then passing it to [method import].
				[b]Note:[/b] If the script is reused, it is preferrable to construct a [SquirrelScript] and call [method SquirrelScript.compile] rather than compiling it each time.
			</description>
		</method>
		<method name="import_string">
			<return type="void" />
			<description>
				Imports the [url=http://www.squirrel-lang.org/squirreldoc/stdlib/stdstringlib.html]string[/url] library.
			</description>
		</method>
		<method name="intern_variant">
			<return type="SquirrelUserData" />
			<param index="0" name="value" type="Variant" />
			<description>
				Similar to [method wrap_variant], but returns the same [SquirrelUserData] instance for a given [param value] as long as it is reachable.
			</description>
		</method>
		<method name="is_suspended" qualifiers="const">
			<return type="bool" />
			<description>
				Convenience function for checking if [method get_state] is [constant SUSPENDED].
				If your code is not expecting the script to call [code]suspend[/code], one option is to throw the VM away and raise an error if this function returns true after a call to [method call_function].
			</description>
		</method>
		<method name="pop_stack">
			<return type="void" />
			<param index="0" name="count" type="int" default="1" />
			<description>
				Removes [param count] items from the top of the stack.
			</description>
		</method>
		<method name="push_stack">
			<return type="bool" />
			<param index="0" name="value" type="Variant" />
			<description>
				Adds [param value] to the top of the stack.
			</description>
		</method>
		<method name="remove_stack">
			<return type="void" />
			<param index="0" name="index" type="int" />
			<description>
				Removes an arbitrary value from the stack by [param index].
			</description>
		</method>
		<method name="reset_last_error">
			<return type="void" />
			<description>
				Sets the error value to [code]null[/code].
			</description>
		</method>
		<method name="resume_generator">
			<return type="Variant" />
			<param index="0" name="generator" type="SquirrelGenerator" />
			<description>
				Runs a [SquirrelGenerator] until the next [code]yield[/code] statement or until it returns.
				Returns the value given to [code]yield[/code].
			</description>
		</method>
		<method name="resurrect_unreachable">
			<return type="SquirrelVariant[]" />
			<description>
				Runs the garbage collector (see [method collect_garbage]), but instead of deleting unreachable objects, returns them in an array.
				[b]Note:[/b] Unreferenced (as opposed to just unreachable) objects are deleted automatically without calling the garbage collector.
			</description>
		</method>
		<method name="set_error_handler">
			<return type="void" />
			<param index="0" name="func" type="SquirrelAnyFunction" />
			<description>
				Defines a function that will be called when an exception is thrown in Squirrel.
			</description>
		</method>
		<method name="set_error_handler_default">
			<return type="void" />
			<description>
				Resets the error handler to the standard error handler, which prints information about the error and the state of the stack to the error stream.
			</description>
		</method>
		<method name="set_handle_caught_errors">
			<return type="void" />
			<param index="0" name="enable" type="bool" />
			<description>
				Causes the VM to call the error handler even if an exception is caught.
			</description>
		</method>
		<method name="wake_up">
			<return type="Variant" />
			<param index="0" name="value" type="Variant" default="null" />
			<description>
			</description>
		</method>
		<method name="wake_up_throw">
			<return type="Variant" />
			<param index="0" name="exception" type="Variant" />
			<description>
			</description>
		</method>
		<method name="wrap_callable">
			<return type="SquirrelNativeFunction" />
			<param index="0" name="callable" type="Callable" />
			<param index="1" name="varargs" type="bool" default="false" />
			<description>
				Creates a [SquirrelNativeFunction] that calls [param callable].
				If [param varargs] is true, the function will be called as: [gdscript]callable(vm_or_thread: SquirrelVMBase, this: Variant, args: Array)[/gdscript]
				Otherwise, the function will be called as: [gdscript]callable(arg1, arg2, arg3, ..., argn)[/gdscript]
				[b]Note:[/b] Due to limitations in Godot, calling a function with the wrong parameters in Squirrel will act as if the function immediately returned [code]null[/code].
			</description>
		</method>
		<method name="wrap_variant">
			<return type="SquirrelUserData" />
			<param index="0" name="value" type="Variant" />
			<description>
				Wraps [param value] as a [SquirrelUserData], which can then be sent through a Squirrel script as an opaque value or have a delegate assigned, then be retrieved using [method SquirrelUserData.get_variant].
			</description>
		</method>
	</methods>
	<members>
		<member name="const_table" type="SquirrelTable" setter="set_const_table" getter="get_const_table">
		</member>
		<member name="registry_table" type="SquirrelTable" setter="" getter="get_registry_table">
		</member>
		<member name="root_table" type="SquirrelTable" setter="set_root_table" getter="get_root_table">
		</member>
	</members>
	<constants>
		<constant name="IDLE" value="0" enum="VMState">
		</constant>
		<constant name="RUNNING" value="1" enum="VMState">
		</constant>
		<constant name="SUSPENDED" value="2" enum="VMState">
		</constant>
	</constants>
</class>
